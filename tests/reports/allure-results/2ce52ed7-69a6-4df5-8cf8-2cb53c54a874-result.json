{"name": "test_process_urls", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'resources/links.xlsx'", "trace": "self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x00000265A9D12270>\n\n    @allure.story(\"Process URLs from Excel\")\n    @allure.description(\"Test processing URLs from Excel file and capturing screenshots\")\n    def test_process_urls(self):\n        try:\n            # Initialize Configuration and backup previous reports\n            config = Configuration.get_config()\n            Configuration.ensure_directories()\n            Configuration.backup_previous_reports()\n    \n            # Read Excel file\n            excel_path = config[\"excel_path\"]\n            sheet_name = config[\"sheet_name\"]\n    \n            print(f\"\\nReading Excel file: {excel_path}\")\n>           rows = ExcelHandler.get_row_count(excel_path, sheet_name)\n\ntest_url_processor.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\excel_handler.py:29: in get_row_count\n    workbook = ExcelHandler.load_workbook(file)\n..\\utils\\excel_handler.py:10: in load_workbook\n    return openpyxl.load_workbook(file_path)\n..\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:344: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n..\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n..\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>, file = 'resources/links.xlsx', mode = 'r'\ncompression = 0, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'resources/links.xlsx'\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\zipfile\\__init__.py:1331: FileNotFoundError"}, "description": "Test processing URLs from Excel file and capturing screenshots", "steps": [{"name": "Ensuring directories exist", "status": "passed", "start": 1730875954510, "stop": 1730875954514}, {"name": "Loading Excel workbook", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'resources/links.xlsx'\n", "trace": "  File \"C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\utils\\excel_handler.py\", line 10, in load_workbook\n    return openpyxl.load_workbook(file_path)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py\", line 344, in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py\", line 123, in __init__\n    self.archive = _validate_archive(fn)\n                   ^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py\", line 95, in _validate_archive\n    archive = ZipFile(filename, 'r')\n              ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Jyothiswaroop\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\zipfile\\__init__.py\", line 1331, in __init__\n    self.fp = io.open(file, filemode)\n              ^^^^^^^^^^^^^^^^^^^^^^^\n"}, "attachments": [{"name": "Excel Error", "source": "61ca0c69-5d81-4dd2-ab39-a9925780f395-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "file_path", "value": "'resources/links.xlsx'"}], "start": 1730875954515, "stop": 1730875954516}], "attachments": [{"name": "Test Error", "source": "218dff4b-d149-4852-87d8-8f742378c454-attachment.txt", "type": "text/plain"}, {"name": "Error Details", "source": "dff50ec7-8f93-4407-9674-5697717ce493-attachment.txt", "type": "text/plain"}], "start": 1730875954509, "stop": 1730875954518, "uuid": "9e5db142-baee-4ecc-88a9-8dd98268f314", "historyId": "92119e2bb8a8c6776bd585b40f9873e6", "testCaseId": "92119e2bb8a8c6776bd585b40f9873e6", "fullName": "tests.test_url_processor.TestURLProcessor#test_process_urls", "labels": [{"name": "story", "value": "Process URLs from Excel"}, {"name": "epic", "value": "URL Processing"}, {"name": "feature", "value": "URL Validation and Screenshot Capture"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_url_processor"}, {"name": "subSuite", "value": "TestURLProcessor"}, {"name": "host", "value": "DESKTOP-BL4C2NE"}, {"name": "thread", "value": "28696-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_url_processor"}]}