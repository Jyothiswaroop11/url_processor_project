{"name": "test_process_urls", "status": "broken", "statusDetails": {"message": "NameError: name 'successCount' is not defined", "trace": "self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x00000188BF9D22D0>\n\n    @allure.story(\"Process URLs from Excel\")\n    @allure.description(\"Test processing URLs from Excel file and capturing screenshots\")\n    def test_process_urls(self):\n        try:\n            # Initialize Configuration and backup previous reports\n            config = Configuration.get_config()\n            Configuration.ensure_directories()\n            Configuration.backup_previous_reports()\n    \n            # Read Excel file\n            excel_path = config[\"excel_path\"]\n            sheet_name = config[\"sheet_name\"]\n    \n            print(f\"\\nReading Excel file: {excel_path}\")\n            rows = ExcelHandler.get_row_count(excel_path, sheet_name)\n    \n            if rows <= 1:\n                raise ValueError(\"No data found in Excel file\")\n    \n            results = []\n            total_urls = rows - 1  # Subtract header row\n            print(f\"\\nTotal URLs to process: {total_urls}\")\n    \n            # Process each URL\n            for r in range(2, rows + 1):  # Start from row 2 to skip header\n                url = ExcelHandler.read_data(excel_path, sheet_name, r, 1)\n    \n                if not url:\n                    print(f\"Empty URL found in row {r}, skipping...\")\n                    continue\n    \n                current_url_number = r - 1\n                print(f\"\\nProcessing URL {current_url_number} of {total_urls}: {url}\")\n    \n                with allure.step(f\"Processing URL {current_url_number} of {total_urls}\"):\n                    result = WebAutomation.process_url(url, current_url_number)\n                    results.append(result)\n    \n                # Wait between URLs\n                if r < rows:\n                    wait_time = config[\"wait_between_urls\"]\n                    print(f\"Waiting {wait_time} seconds before next URL...\")\n                    time.sleep(wait_time)\n    \n            # Generate summary\n            successful = sum(1 for r in results if r['status'] == 'Success')\n            failed = len(results) - successful\n    \n            summary = f\"\"\"\n            Processing Summary:\n            Total URLs processed: {len(results)}\n            Successfully loaded: {successful}\n            Failed to load: {failed}\n            Success rate: {(successful / len(results) * 100 if results else 0):.2f}%\n            \"\"\"\n            print(\"\\n\" + summary)\n    \n            # Generate HTML report\n>           report_path = ReportHandler.generate_html_report(results)\n\ntest_url_processor.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresults = [{'error': None, 'load_time': 4450.930833816528, 'screenshot': 'C:\\\\Users\\\\Jyothiswaroop\\\\PycharmProjects\\\\url_process...essor_project\\\\reports\\\\screenshots\\\\liquidgeneration_com_20241105_191437.png', 'start_time': 1730852068.8658762, ...}]\n\n    @staticmethod\n    def generate_html_report(results):\n        \"\"\"Generate HTML report with detailed test steps\"\"\"\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    \n        # Backup previous reports\n        Configuration.backup_previous_reports()\n    \n        report_dir = Configuration.get_path(\"extent_report\")\n        if not os.path.exists(report_dir):\n            os.makedirs(report_dir)\n    \n        report_path = os.path.join(report_dir, f\"TestReport_{timestamp}.html\")\n    \n        # Generate content for each URL\n        url_details = []\n        for i, result in enumerate(results):\n            status_class = 'Pass' if result['status'] == 'Success' else 'Fatal'\n            url_name = result['url']\n    \n            # Create steps table\n            steps_content = f\"\"\"\n                <div class=\"url-content\" id=\"content-{i}\" style=\"display: none;\">\n                    <div class=\"header-bar\">\n                        <h2>{url_name}</h2>\n                        <div class=\"time-stamps\">\n                            <span class=\"timestamp start\">{result['timestamp']}</span>\n                            <span class=\"timestamp end\">{datetime.now().strftime('%H:%M:%S')}</span>\n                            <span class=\"duration\">{ReportHandler.get_duration(result['start_time'])}</span>\n                        </div>\n                        <div class=\"action-icons\">\n                            <span class=\"icon info\" onclick=\"showInfo(this)\" title=\"Info\">ⓘ</span>\n                            <span class=\"icon success\" onclick=\"showSuccessInfo(this)\" title=\"Success\">✓</span>\n                            <span class=\"icon error\" onclick=\"showErrorInfo(this)\" title=\"Error\">✕</span>\n                            <span class=\"icon warning\" onclick=\"showWarningInfo(this)\" title=\"Warning\">⚠</span>\n                            <span class=\"icon sync\" onclick=\"refreshContent()\" title=\"Refresh\">↻</span>\n                            <span class=\"icon close\" onclick=\"closeContent()\" title=\"Close\">×</span>\n                        </div>\n                    </div>\n                    <table class=\"details-table\">\n                        <thead>\n                            <tr>\n                                <th>STATUS</th>\n                                <th>TIMESTAMP</th>\n                                <th>DETAILS</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n            \"\"\"\n    \n            for step in result['steps']:\n                step_status_class = {\n                    'FATAL': 'Fatal',\n                    'PASS': 'Pass',\n                    'SUCCESS': 'Pass',\n                    'FAIL': 'Fail',\n                    'INFO': 'Pass'\n                }.get(step['status'], 'Pass')\n    \n                steps_content += f\"\"\"\n                    <tr>\n                        <td>\n                            <div class=\"status-container\">\n                                <span class=\"info-icon\" data-status=\"{step_status_class}\" data-time=\"{step['timestamp']}\">ⓘ</span>\n                                <div class=\"status-tooltip\">\n                                    <div>Status: {step_status_class}</div>\n                                    <div>Time: {step['timestamp']}</div>\n                                </div>\n                            </div>\n                        </td>\n                        <td>{step['timestamp']}</td>\n                        <td>{step['message']}</td>\n                    </tr>\n                \"\"\"\n    \n            if result.get('screenshot'):\n                base64_image = ReportHandler.encode_image_to_base64(result['screenshot'])\n                if base64_image:\n                    steps_content += f\"\"\"\n                        <tr>\n                            <td colspan=\"3\" class=\"screenshot-container\">\n                                <button class=\"screenshot-btn\" onclick=\"toggleScreenshot('screenshot-{i}')\" id=\"btn-screenshot-{i}\">\n                                    Show Screenshot\n                                </button>\n                                <div class=\"screenshot-wrapper\" id=\"screenshot-{i}\" style=\"display: none;\">\n                                    <img src=\"{base64_image}\" class=\"screenshot\" alt=\"Screenshot\" loading=\"lazy\" />\n                                </div>\n                            </td>\n                        </tr>\n                    \"\"\"\n    \n            steps_content += \"\"\"\n                        </tbody>\n                    </table>\n                </div>\n            \"\"\"\n    \n            url_details.append({\n                'index': i,\n                'url': url_name,\n                'status': status_class,\n                'content': steps_content\n            })\n    \n        # Create the HTML content\n        html_content = f\"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Test Results</title>\n            <style>\n                body {{\n                    font-family: Arial, sans-serif;\n                    margin: 0;\n                    padding: 0;\n                    display: flex;\n                    height: 100vh;\n                    background-color: #f5f5f5;\n                }}\n    \n                .left-panel {{\n                    width: 300px;\n                    background-color: #fff;\n                    border-right: 1px solid #ddd;\n                    overflow-y: auto;\n                    height: 100vh;\n                    display: flex;\n                    flex-direction: column;\n                }}\n    \n                .left-panel-header {{\n                    padding: 20px;\n                    border-bottom: 1px solid #ddd;\n                    background-color: #f8f9fa;\n                }}\n    \n                .left-panel-header h1 {{\n                    margin: 0;\n                    font-size: 18px;\n                    color: #666;\n                }}\n    \n                .toolbar {{\n                    padding: 10px;\n                    border-bottom: 1px solid #ddd;\n                    display: flex;\n                    gap: 5px;\n                    background-color: #fff;\n                }}\n    \n                .toolbar-icon {{\n                    width: 30px;\n                    height: 30px;\n                    border-radius: 50%;\n                    background-color: #e0e0e0;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    cursor: pointer;\n                    transition: all 0.3s ease;\n                    font-size: 16px;\n                }}\n    \n                .toolbar-icon:hover {{\n                    background-color: #1976D2;\n                    color: white;\n                }}\n    \n                .right-panel {{\n                    flex: 1;\n                    overflow-y: auto;\n                    padding: 20px;\n                    background-color: #fff;\n                }}\n    \n                .url-list {{\n                    list-style: none;\n                    padding: 0;\n                    margin: 0;\n                    flex-grow: 1;\n                    overflow-y: auto;\n                }}\n    \n                .url-item {{\n                    padding: 15px;\n                    border-bottom: 1px solid #ddd;\n                    cursor: pointer;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                }}\n    \n                .url-item:hover {{\n                    background-color: #f8f9fa;\n                }}\n    \n                .url-item.active {{\n                    background-color: #e9ecef;\n                }}\n    \n                .status-badge {{\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    font-size: 12px;\n                    color: white;\n                    font-weight: 500;\n                }}\n    \n                .Pass {{\n                    background-color: #28a745;\n                }}\n    \n                .Fatal {{\n                    background-color: #dc3545;\n                }}\n    \n                .Fail {{\n                    background-color: #dc3545;\n                }}\n    \n                .header-bar {{\n                    padding: 20px;\n                    border-bottom: 1px solid #ddd;\n                    background-color: #f8f9fa;\n                    margin-bottom: 20px;\n                    border-radius: 4px;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    flex-wrap: wrap;\n                    gap: 15px;\n                }}\n    \n                .time-stamps {{\n                    display: flex;\n                    gap: 10px;\n                    align-items: center;\n                }}\n    \n                .timestamp {{\n                    padding: 6px 12px;\n                    border-radius: 4px;\n                    font-size: 13px;\n                    font-weight: 500;\n                    color: white;\n                }}\n    \n                .timestamp.start {{\n                    background-color: #28a745;\n                }}\n    \n                .timestamp.end {{\n                    background-color: #dc3545;\n                }}\n    \n                .duration {{\n                    padding: 6px 12px;\n                    border-radius: 4px;\n                    font-size: 13px;\n                    background-color: #6c757d;\n                    color: white;\n                }}\n    \n                .action-icons {{\n                    display: flex;\n                    gap: 5px;\n                }}\n    \n                .icon {{\n                    width: 30px;\n                    height: 30px;\n                    border-radius: 50%;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    cursor: pointer;\n                    color: white;\n                }}\n    \n                .icon:hover {{\n                    transform: scale(1.1);\n                }}\n    \n                .icon.info {{ background-color: #17a2b8; }}\n                .icon.success {{ background-color: #28a745; }}\n                .icon.error {{ background-color: #dc3545; }}\n                .icon.warning {{ background-color: #ffc107; color: #000; }}\n                .icon.sync {{ background-color: #6c757d; }}\n                .icon.close {{ background-color: #6c757d; }}\n    \n                .status-container {{\n                    position: relative;\n                    display: inline-block;\n                }}\n    \n                .status-tooltip {{\n                    display: none;\n                    position: absolute;\n                    background-color: #333;\n                    color: white;\n                    padding: 8px 12px;\n                    border-radius: 4px;\n                    font-size: 12px;\n                    z-index: 1000;\n                    white-space: nowrap;\n                    left: 100%;\n                    top: 50%;\n                    transform: translateY(-50%);\n                    margin-left: 10px;\n                }}\n    \n                .status-container:hover .status-tooltip {{\n                    display: block;\n                }}\n    \n                .details-table {{\n                    width: 100%;\n                    border-collapse: collapse;\n                    margin-top: 20px;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n                }}\n    \n                .details-table th {{\n                    padding: 12px 15px;\n                    text-align: left;\n                    background-color: #f8f9fa;\n                    color: #666;\n                    font-weight: 600;\n                    border-bottom: 2px solid #dee2e6;\n                }}\n    \n                .details-table td {{\n                    padding: 12px 15px;\n                    border-bottom: 1px solid #dee2e6;\n                }}\n    \n                .screenshot-container {{\n                    text-align: center;\n                    padding: 20px;\n                    background-color: #f8f9fa;\n                }}\n    \n                .screenshot-btn {{\n                    background-color: #2196F3;\n                    color: white;\n                    border: none;\n                    padding: 10px 20px;\n                    border-radius: 4px;\n                    cursor: pointer;\n                    font-weight: 500;\n                    transition: all 0.3s ease;\n                }}\n    \n                .screenshot-btn.active {{\n                    background-color: #dc3545;\n                }}\n    \n                .screenshot {{\n                    max-width: 100%;\n                    margin-top: 15px;\n                    border: 1px solid #ddd;\n                    border-radius: 4px;\n                }}\n    \n                .screenshot-wrapper {{\n                    display: none;\n                    margin-top: 15px;\n                }}\n            </style>\n        </head>\n        <body>\n            <div class=\"left-panel\">\n                <div class=\"left-panel-header\">\n                    <h1>TESTS</h1>\n                </div>\n                <div class=\"toolbar\">\n                    <div class=\"toolbar-icon\" title=\"Toggle Menu\">≡</div>\n                    <div class=\"toolbar-icon\" title=\"Refresh\">↺</div>\n                    <div class=\"toolbar-icon\" title=\"Close Panel\">×</div>\n                    <div class=\"toolbar-icon\" title=\"Search\">🔍</div>\n                </div>\n                <ul class=\"url-list\">\n                    {\"\".join(f'''\n                        <li class=\"url-item\" onclick=\"showContent({detail['index']})\">\n                            <span>{detail['url']}</span>\n                            <span class=\"status-badge {detail['status']}\">{detail['status']}</span>\n                        </li>\n                    ''' for detail in url_details)}\n                </ul>\n            </div>\n    \n            <div class=\"right-panel\">\n                {\"\".join(detail['content'] for detail in url_details)}\n            </div>\n    \n            <script>\n                function showContent(index) {{\n                    document.querySelectorAll('.url-content').forEach(content => {{\n                        content.style.display = 'none';\n                    }});\n    \n                    document.querySelectorAll('.url-item').forEach(item => {{\n                        item.classList.remove('active');\n                    }});\n    \n                    const selectedContent = document.getElementById(`content-${{index}}`);\n                    const selectedItem = document.querySelectorAll('.url-item')[index];\n    \n                    if (selectedContent && selectedItem) {{\n                        selectedContent.style.display = 'block';\n                        selectedItem.classList.add('active');\n                    }}\n                }}\n    \n                function toggleScreenshot(id) {{\n                    const screenshot = document.getElementById(id);\n                    const button = document.getElementById(`btn-${{id}}`);\n    \n                    if (!screenshot || !button) return;\n    \n                    const isHidden = screenshot.style.display === 'none';\n                    screenshot.style.display = isHidden ? 'block' : 'none';\n                    button.textContent = isHidden ? 'Hide Screenshot' : 'Show Screenshot';\n                    button.style.backgroundColor = isHidden ? '#dc3545' : '#2196F3';\n                    button.classList.toggle('active');\n                }}\n    \n                function showInfo(element) {{\n                    const successCount = document.querySelectorAll('.status-badge.Pass').length;\n                    const failCount = document.querySelectorAll('.status-badge.Fatal, .status-badge.Fail').length;\n>                   alert(`Test Summary:\\\\nPassed: ${successCount}\\\\nFailed: ${failCount}\\\\nTotal: ${successCount + failCount}`);\n                }}\n    \n                function showSuccessInfo(element) {{\n                    const successCount = document.querySelectorAll('.status-badge.Pass').length;\n                    alert(`Passed Tests: ${successCount}`);\n                }}\n    \n                function showErrorInfo(element) {{\n                    const failCount = document.querySelectorAll('.status-badge.Fatal, .status-badge.Fail').length;\n                    alert(`Failed Tests: ${failCount}`);\n                }}\n    \n                function showWarningInfo(element) {{\n                    alert('No warnings at this time');\n                }}\n    \n                function refreshContent() {{\n                    location.reload();\n                }}\n    \n                function closeContent() {{\n                    const rightPanel = document.querySelector('.right-panel');\n                    if (rightPanel) {{\n                        rightPanel.style.display = rightPanel.style.display === 'none' ? 'block' : 'none';\n                    }}\n                }}\n    \n                function searchUrls() {{\n                    const searchTerm = prompt('Enter search term:');\n                    if (searchTerm !== null && searchTerm.trim() !== '') {{\n                        const items = document.querySelectorAll('.url-item');\n                        let found = false;\n    \n                        items.forEach(item => {{\n                            const text = item.textContent.toLowerCase();\n                            const search = searchTerm.toLowerCase().trim();\n    \n                            if (text.includes(search)) {{\n                                item.style.display = 'flex';\n                                found = true;\n                            }} else {{\n                                item.style.display = 'none';\n                            }}\n                        }});\n    \n                        if (!found) {{\n                            alert('No matching items found');\n                        }}\n                    }}\n                }}\n    \n                // Initialize all functionality\n                document.addEventListener('DOMContentLoaded', function() {{\n                    // Menu toggle\n                    const menuToggle = document.querySelector('.toolbar-icon:nth-child(1)');\n                    if (menuToggle) {{\n                        menuToggle.onclick = function() {{\n                            const urlList = document.querySelector('.url-list');\n                            if (urlList) {{\n                                urlList.style.display = urlList.style.display === 'none' ? 'block' : 'none';\n                            }}\n                        }};\n                    }}\n    \n                    // Refresh button\n                    const refreshButton = document.querySelector('.toolbar-icon:nth-child(2)');\n                    if (refreshButton) {{\n                        refreshButton.onclick = refreshContent;\n                    }}\n    \n                    // Close panel button\n                    const closeButton = document.querySelector('.toolbar-icon:nth-child(3)');\n                    if (closeButton) {{\n                        closeButton.onclick = closeContent;\n                    }}\n    \n                    // Search button\n                    const searchButton = document.querySelector('.toolbar-icon:nth-child(4)');\n                    if (searchButton) {{\n                        searchButton.onclick = searchUrls;\n                    }}\n    \n                    // Initialize tooltips\n                    document.querySelectorAll('.status-container').forEach(container => {{\n                        container.addEventListener('mouseenter', function() {{\n                            const tooltip = this.querySelector('.status-tooltip');\n                            if (tooltip) {{\n                                tooltip.style.display = 'block';\n                            }}\n                        }});\n    \n                        container.addEventListener('mouseleave', function() {{\n                            const tooltip = this.querySelector('.status-tooltip');\n                            if (tooltip) {{\n                                tooltip.style.display = 'none';\n                            }}\n                        }});\n                    }});\n    \n                    // Show first URL content by default\n                    const urlItems = document.querySelectorAll('.url-item');\n                    if (urlItems.length > 0) {{\n                        showContent(0);\n                    }}\n                }});\n            </script>\n        </body>\n        </html>\n        \"\"\"\nE       NameError: name 'successCount' is not defined\n\n..\\utils\\report_handler.py:460: NameError"}, "description": "Test processing URLs from Excel file and capturing screenshots", "steps": [{"name": "Ensuring directories exist", "status": "passed", "start": 1730852017015, "stop": 1730852017020}, {"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730852017025, "stop": 1730852017037}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730852017037, "stop": 1730852017042}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "2"}, {"name": "columnno", "value": "1"}], "start": 1730852017037, "stop": 1730852017042}, {"name": "Processing URL 1 of 4", "status": "passed", "attachments": [{"name": "Screenshot_oceanofgames_com", "source": "bcfb414b-2392-4621-b626-c771541cf5cf-attachment.png", "type": "image/png"}], "start": 1730852017042, "stop": 1730852028518}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730852030519, "stop": 1730852030523}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "3"}, {"name": "columnno", "value": "1"}], "start": 1730852030519, "stop": 1730852030523}, {"name": "Processing URL 2 of 4", "status": "passed", "attachments": [{"name": "Screenshot_cnn_com", "source": "860511d8-f602-46c8-8fd2-ef881b90a999-attachment.png", "type": "image/png"}], "start": 1730852030523, "stop": 1730852054488}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730852056489, "stop": 1730852056493}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "4"}, {"name": "columnno", "value": "1"}], "start": 1730852056489, "stop": 1730852056493}, {"name": "Processing URL 3 of 4", "status": "passed", "attachments": [{"name": "Screenshot_google_com", "source": "50f9cabc-df18-4fde-9e2a-2a8f37cf6efb-attachment.png", "type": "image/png"}], "start": 1730852056493, "stop": 1730852066857}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730852068858, "stop": 1730852068866}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "5"}, {"name": "columnno", "value": "1"}], "start": 1730852068858, "stop": 1730852068866}, {"name": "Processing URL 4 of 4", "status": "passed", "attachments": [{"name": "Screenshot_liquidgeneration_com", "source": "dbcb0117-c437-4e2b-83c2-cf7e09b6865a-attachment.png", "type": "image/png"}], "start": 1730852068866, "stop": 1730852084560}], "attachments": [{"name": "Test Error", "source": "ba029fb4-29db-4860-b1f5-7d5f7085cf01-attachment.txt", "type": "text/plain"}, {"name": "Error Details", "source": "31026f1b-d901-48ce-93be-eab1b4956d4e-attachment.txt", "type": "text/plain"}], "start": 1730852017013, "stop": 1730852084584, "uuid": "f4a5edc0-a4b2-4513-8043-1a0398626e8b", "historyId": "92119e2bb8a8c6776bd585b40f9873e6", "testCaseId": "92119e2bb8a8c6776bd585b40f9873e6", "fullName": "tests.test_url_processor.TestURLProcessor#test_process_urls", "labels": [{"name": "epic", "value": "URL Processing"}, {"name": "feature", "value": "URL Validation and Screenshot Capture"}, {"name": "story", "value": "Process URLs from Excel"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_url_processor"}, {"name": "subSuite", "value": "TestURLProcessor"}, {"name": "host", "value": "DESKTOP-BL4C2NE"}, {"name": "thread", "value": "28420-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_url_processor"}]}