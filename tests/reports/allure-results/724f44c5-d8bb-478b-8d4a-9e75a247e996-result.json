{"name": "test_process_excel_urls", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Jyothiswaroop\\\\PycharmProjects\\\\url_processor_project\\\\utils\\\\original_styles.css'", "trace": "self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x000002E9ED85E360>\nexcel_urls = [('oceanofgames.com', 2), ('google.com', 3), ('http://www.liquidgeneration.com/', 4), ('https://httpstat.us/403', 5)]\n\n    @allure.story(\"Process URLs from Excel with Error Detection\")\n    def test_process_excel_urls(self, excel_urls):\n        \"\"\"Test processing URLs from Excel file with error detection\"\"\"\n        try:\n            # Initialize Configuration and backup previous reports\n            Configuration.backup_previous_reports()\n    \n            results = []\n            total_urls = len(excel_urls)\n            print(f\"\\nTotal URLs to process: {total_urls}\")\n    \n            # Process each URL\n            for url, row_number in excel_urls:\n                with allure.step(f\"Processing URL {row_number - 1} of {total_urls}: {url}\"):\n                    print(f\"\\nProcessing URL {row_number - 1} of {total_urls}: {url}\")\n    \n                    result = WebAutomation.process_url(url, row_number - 1)\n                    results.append(result)\n    \n                    # Add detailed Allure report\n                    status_color = \"green\" if result['status'] == 'Success' else \"red\"\n                    allure.attach(\n                        body=f\"\"\"\n                        URL: {url}\n                        Status: {result['status']}\n                        Error: {result['error'] if result['error'] else 'None'}\n                        Load Time: {result.get('load_time', 0):.2f}ms\n                        \"\"\",\n                        name=f\"URL Test Result {row_number - 1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    # Wait between URLs\n                    if row_number < total_urls:\n                        wait_time = Configuration.get_config()[\"wait_between_urls\"]\n                        print(f\"Waiting {wait_time} seconds before next URL...\")\n                        time.sleep(wait_time)\n    \n            # Generate summary\n            successful = sum(1 for r in results if r['status'] == 'Success')\n            failed = len(results) - successful\n    \n            summary = f\"\"\"\n            Processing Summary:\n            Total URLs processed: {len(results)}\n            Successfully loaded: {successful}\n            Failed to load: {failed}\n            Success rate: {(successful / len(results) * 100 if results else 0):.2f}%\n    \n            Failed URLs:\n            {self._format_failed_urls(results)}\n            \"\"\"\n            print(\"\\n\" + summary)\n    \n            # Update global test results for Flask server\n            global test_results\n            test_results = results\n    \n            # Generate HTML report\n>           report_path = ReportHandler.generate_html_report(results)\n\ntest_url_processor.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\report_handler.py:581: in generate_html_report\n    <style>{ReportHandler.get_styles()}</style>\n..\\utils\\report_handler.py:418: in get_styles\n    return styles + ReportHandler.get_original_styles()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @staticmethod\n    def get_original_styles():\n        return \"\"\"\n                /* Your original styles here */\n>               \"\"\" + open(os.path.join(os.path.dirname(__file__), 'original_styles.css')).read()\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Jyothiswaroop\\\\PycharmProjects\\\\url_processor_project\\\\utils\\\\original_styles.css'\n\n..\\utils\\report_handler.py:424: FileNotFoundError"}, "description": "Test processing URLs from Excel file with error detection", "steps": [{"name": "Processing URL 1 of 4: oceanofgames.com", "status": "passed", "attachments": [{"name": "Screenshot_oceanofgames_com", "source": "22b11d11-8e49-4bae-b64c-952555b392d4-attachment.png", "type": "image/png"}, {"name": "URL Test Result 1", "source": "a3ad0038-c2de-4c52-b687-fdd2eb361cce-attachment.txt", "type": "text/plain"}], "start": 1730948903496, "stop": 1730948916661}, {"name": "Processing URL 2 of 4: google.com", "status": "passed", "attachments": [{"name": "Screenshot_google_com", "source": "bbfbd54f-8b25-414c-9bb0-081ff356211b-attachment.png", "type": "image/png"}, {"name": "URL Test Result 2", "source": "b88d0cfe-fec3-4f36-b7b9-7e31f16f2b07-attachment.txt", "type": "text/plain"}], "start": 1730948916661, "stop": 1730948929342}, {"name": "Processing URL 3 of 4: http://www.liquidgeneration.com/", "status": "passed", "attachments": [{"name": "Screenshot_liquidgeneration_com", "source": "33db0916-98cf-4979-af4e-be90d559c362-attachment.png", "type": "image/png"}, {"name": "URL Test Result 3", "source": "f1655a62-0cf9-42f3-843d-0930027bf888-attachment.txt", "type": "text/plain"}], "start": 1730948929342, "stop": 1730948944159}, {"name": "Processing URL 4 of 4: https://httpstat.us/403", "status": "passed", "attachments": [{"name": "Screenshot_httpstat_us_403", "source": "6339599c-93ef-41e7-aefb-897d7d93cc77-attachment.png", "type": "image/png"}, {"name": "URL Test Result 4", "source": "ed0a9d65-7830-4712-b0bd-2279b79e7b25-attachment.txt", "type": "text/plain"}], "start": 1730948944159, "stop": 1730948954190}], "attachments": [{"name": "Test Error", "source": "677b039d-655c-4dac-b8ff-1a7a3259d7e4-attachment.txt", "type": "text/plain"}, {"name": "Error Details", "source": "9f092292-03d9-485e-af51-1cb0a4cadfd7-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "df03e000-6ca5-4041-9650-831231663fc1-attachment.txt", "type": "text/plain"}], "start": 1730948903493, "stop": 1730948954192, "uuid": "76b54927-53d0-43de-8d27-c6dc3b89146a", "historyId": "be5f01bbfe467b80211c2ce078a6b793", "testCaseId": "be5f01bbfe467b80211c2ce078a6b793", "fullName": "tests.test_url_processor.TestURLProcessor#test_process_excel_urls", "labels": [{"name": "story", "value": "Process URLs from Excel with Error Detection"}, {"name": "feature", "value": "URL Validation and Error Detection"}, {"name": "epic", "value": "URL Processing"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_url_processor"}, {"name": "subSuite", "value": "TestURLProcessor"}, {"name": "host", "value": "DESKTOP-BL4C2NE"}, {"name": "thread", "value": "31788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_url_processor"}]}