{"name": "test_process_urls", "status": "broken", "statusDetails": {"message": "AttributeError: type object 'ReportHandler' has no attribute 'get_styles'", "trace": "self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x00000281AF682330>\n\n    @allure.story(\"Process URLs from Excel\")\n    @allure.description(\"Test processing URLs from Excel file and capturing screenshots\")\n    def test_process_urls(self):\n        try:\n            # Initialize Configuration and backup previous reports\n            config = Configuration.get_config()\n            Configuration.ensure_directories()\n            Configuration.backup_previous_reports()\n    \n            # Read Excel file\n            excel_path = config[\"excel_path\"]\n            sheet_name = config[\"sheet_name\"]\n    \n            print(f\"\\nReading Excel file: {excel_path}\")\n            rows = ExcelHandler.get_row_count(excel_path, sheet_name)\n    \n            if rows <= 1:\n                raise ValueError(\"No data found in Excel file\")\n    \n            results = []\n            total_urls = rows - 1  # Subtract header row\n            print(f\"\\nTotal URLs to process: {total_urls}\")\n    \n            # Process each URL\n            for r in range(2, rows + 1):  # Start from row 2 to skip header\n                url = ExcelHandler.read_data(excel_path, sheet_name, r, 1)\n    \n                if not url:\n                    print(f\"Empty URL found in row {r}, skipping...\")\n                    continue\n    \n                current_url_number = r - 1\n                print(f\"\\nProcessing URL {current_url_number} of {total_urls}: {url}\")\n    \n                with allure.step(f\"Processing URL {current_url_number} of {total_urls}\"):\n                    result = WebAutomation.process_url(url, current_url_number)\n                    results.append(result)\n    \n                # Wait between URLs\n                if r < rows:\n                    wait_time = config[\"wait_between_urls\"]\n                    print(f\"Waiting {wait_time} seconds before next URL...\")\n                    time.sleep(wait_time)\n    \n            # Generate summary\n            successful = sum(1 for r in results if r['status'] == 'Success')\n            failed = len(results) - successful\n    \n            summary = f\"\"\"\n            Processing Summary:\n            Total URLs processed: {len(results)}\n            Successfully loaded: {successful}\n            Failed to load: {failed}\n            Success rate: {(successful / len(results) * 100 if results else 0):.2f}%\n            \"\"\"\n            print(\"\\n\" + summary)\n    \n            # Generate HTML report\n>           report_path = ReportHandler.generate_html_report(results)\n\ntest_url_processor.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresults = [{'error': None, 'load_time': 4544.677972793579, 'screenshot': 'C:\\\\Users\\\\Jyothiswaroop\\\\PycharmProjects\\\\url_process...cessor_project\\\\reports\\\\screenshots\\\\liquidgeneration_com_20241106_013807.png', 'start_time': 1730875080.977611, ...}]\n\n    @staticmethod\n    def generate_html_report(results):\n        \"\"\"Generate HTML report with detailed test steps\"\"\"\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    \n        # Backup previous reports\n        Configuration.backup_previous_reports()\n    \n        report_dir = Configuration.get_path(\"extent_report\")\n        if not os.path.exists(report_dir):\n            os.makedirs(report_dir)\n    \n        report_path = os.path.join(report_dir, f\"TestReport_{timestamp}.html\")\n    \n        # Calculate statistics\n        stats = ReportHandler.calculate_stats(results)\n    \n        # Generate content for each URL\n        url_details = []\n        for i, result in enumerate(results):\n            status_class = 'Pass' if result['status'] == 'Success' else 'Fatal'\n            url_name = result['url']\n    \n            # Create steps table\n            steps_content = f\"\"\"\n                    <div class=\"url-content\" id=\"content-{i}\" style=\"display: none;\">\n                        <div class=\"header-bar\">\n                            <div class=\"header-main\">\n                                <h2>{url_name}</h2>\n                                <div class=\"status-indicator {status_class.lower()}\">{status_class}</div>\n                            </div>\n                            <div class=\"header-details\">\n                                <div class=\"time-stamps\">\n                                    <span class=\"timestamp start\">{result['timestamp']}</span>\n                                    <span class=\"timestamp end\">{datetime.now().strftime('%H:%M:%S')}</span>\n                                    <span class=\"duration\">{ReportHandler.get_duration(result['start_time'])}</span>\n                                </div>\n                                <div class=\"action-buttons\">\n                                    <button class=\"btn info\" onclick=\"showInfo('{i}')\" title=\"Info\">\n                                        <span class=\"icon\">ⓘ</span>\n                                    </button>\n                                    <button class=\"btn refresh\" onclick=\"refreshContent()\" title=\"Refresh\">\n                                        <span class=\"icon\">↻</span>\n                                    </button>\n                                    <button class=\"btn\" onclick=\"exportTestCase('{i}')\" title=\"Export\">\n                                        <span class=\"icon\">↓</span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n    \n                        <div class=\"content-tabs\">\n                            <button class=\"tab-btn active\" onclick=\"showTab({i}, 'steps')\">Steps</button>\n                            <button class=\"tab-btn\" onclick=\"showTab({i}, 'screenshots')\">Screenshots</button>\n                            <button class=\"tab-btn\" onclick=\"showTab({i}, 'data')\">Data</button>\n                        </div>\n    \n                        <div class=\"tab-content\" id=\"steps-{i}\">\n                            <table class=\"details-table\">\n                                <thead>\n                                    <tr>\n                                        <th width=\"10%\">Status</th>\n                                        <th width=\"20%\">Timestamp</th>\n                                        <th width=\"70%\">Details</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                \"\"\"\n    \n            for step in result['steps']:\n                step_status_class = {\n                    'FATAL': 'Fatal',\n                    'PASS': 'Pass',\n                    'SUCCESS': 'Pass',\n                    'FAIL': 'Fail',\n                    'INFO': 'Info'\n                }.get(step['status'], 'Info')\n    \n                steps_content += f\"\"\"\n                        <tr class=\"step-row {step_status_class.lower()}\">\n                            <td>\n                                <div class=\"status-container\">\n                                    <span class=\"step-status {step_status_class.lower()}\">{step_status_class}</span>\n                                </div>\n                            </td>\n                            <td>{step['timestamp']}</td>\n                            <td>{step['message']}</td>\n                        </tr>\n                    \"\"\"\n    \n            steps_content += \"\"\"\n                                </tbody>\n                            </table>\n                        </div>\n                \"\"\"\n    \n            if result.get('screenshot'):\n                base64_image = ReportHandler.encode_image_to_base64(result['screenshot'])\n                if base64_image:\n                    steps_content += f\"\"\"\n                            <div class=\"tab-content\" id=\"screenshots-{i}\" style=\"display: none;\">\n                                <div class=\"screenshot-gallery\">\n                                    <div class=\"screenshot-container\">\n                                        <img src=\"{base64_image}\" class=\"screenshot\"\n                                             alt=\"Test Screenshot\" loading=\"lazy\"\n                                             onclick=\"openImageModal(this.src)\" />\n                                        <div class=\"screenshot-overlay\">\n                                            <button class=\"btn\" onclick=\"downloadScreenshot(this)\">\n                                                Download\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        \"\"\"\n    \n            # Add data tab content\n            steps_content += f\"\"\"\n                    <div class=\"tab-content\" id=\"data-{i}\" style=\"display: none;\">\n                        <div class=\"data-container\">\n                            <pre><code>{json.dumps(result, indent=2)}</code></pre>\n                        </div>\n                    </div>\n                \"\"\"\n    \n            steps_content += \"</div>\"  # Close url-content div\n    \n            url_details.append({\n                'index': i,\n                'url': url_name,\n                'status': status_class,\n                'content': steps_content,\n                'timestamp': result['timestamp'],\n                'duration': result.get('load_time', 0)\n            })\n    \n        # Generate complete HTML content\n        html_content = f\"\"\"\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Test Results - {timestamp}</title>\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\">\n                <style>\n>                   {ReportHandler.get_styles()}\n                </style>\n            </head>\n            <body>\n                <div class=\"layout\">\n                    <div class=\"left-panel\">\n                        <div class=\"left-panel-header\">\n                            <h1>Test Results</h1>\n                            <div class=\"header-actions\">\n                                <button class=\"btn\" onclick=\"togglePanel()\">≡</button>\n                            </div>\n                        </div>\n                        {ReportHandler.generate_dashboard_html(stats)}\n                        <ul class=\"url-list\">\n                            {\"\".join(f'''\n                                <li class=\"url-item\" onclick=\"showContent({detail['index']})\"\n                                    data-timestamp=\"{detail['timestamp']}\"\n                                    data-duration=\"{detail['duration']}\">\n                                    <div class=\"url-item-content\">\n                                        <span class=\"url-name\">{detail['url']}</span>\n                                        <span class=\"status-badge {detail['status'].lower()}\">{detail['status']}</span>\n                                    </div>\n                                </li>\n                            ''' for detail in url_details)}\n                        </ul>\n                    </div>\n    \n                    <div class=\"right-panel\">\n                        {\"\".join(detail['content'] for detail in url_details)}\n                    </div>\n    \n                    <!-- Image Modal -->\n                    <div id=\"imageModal\" class=\"modal\">\n                        <span class=\"modal-close\" onclick=\"closeImageModal()\">&times;</span>\n                        <img id=\"modalImage\" class=\"modal-content\">\n                    </div>\n                </div>\n    \n                <script>\n                    {ReportHandler.get_scripts()}\n                </script>\n            </body>\n            </html>\n            \"\"\"\nE       AttributeError: type object 'ReportHandler' has no attribute 'get_styles'\n\n..\\utils\\report_handler.py:254: AttributeError"}, "description": "Test processing URLs from Excel file and capturing screenshots", "steps": [{"name": "Ensuring directories exist", "status": "passed", "start": 1730875022312, "stop": 1730875022315}, {"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730875022318, "stop": 1730875022325}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730875022326, "stop": 1730875022329}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "2"}, {"name": "columnno", "value": "1"}], "start": 1730875022326, "stop": 1730875022329}, {"name": "Processing URL 1 of 4", "status": "passed", "attachments": [{"name": "Screenshot_oceanofgames_com", "source": "72384cce-b5d4-4566-88ef-0432a0d925e6-attachment.png", "type": "image/png"}], "start": 1730875022329, "stop": 1730875033596}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730875035597, "stop": 1730875035600}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "3"}, {"name": "columnno", "value": "1"}], "start": 1730875035597, "stop": 1730875035600}, {"name": "Processing URL 2 of 4", "status": "passed", "attachments": [{"name": "Screenshot_cnn_com", "source": "ccd55995-a3af-4ffc-8e8f-836e8e87846d-attachment.png", "type": "image/png"}], "start": 1730875035600, "stop": 1730875066694}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730875068695, "stop": 1730875068698}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "4"}, {"name": "columnno", "value": "1"}], "start": 1730875068695, "stop": 1730875068698}, {"name": "Processing URL 3 of 4", "status": "passed", "attachments": [{"name": "Screenshot_google_com", "source": "7fc18aa9-72df-403b-9adc-7589a1b74b9b-attachment.png", "type": "image/png"}], "start": 1730875068698, "stop": 1730875078970}, {"name": "Reading Excel data", "status": "passed", "steps": [{"name": "Loading Excel workbook", "status": "passed", "parameters": [{"name": "file_path", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}], "start": 1730875080971, "stop": 1730875080978}], "parameters": [{"name": "file", "value": "'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_processor_project\\resources\\links.xlsx'"}, {"name": "sheet_name", "value": "'Sheet1'"}, {"name": "rownum", "value": "5"}, {"name": "columnno", "value": "1"}], "start": 1730875080971, "stop": 1730875080978}, {"name": "Processing URL 4 of 4", "status": "passed", "attachments": [{"name": "Screenshot_liquidgeneration_com", "source": "64e718e9-ca4d-4b4d-bfe4-108908d0f4c8-attachment.png", "type": "image/png"}], "start": 1730875080978, "stop": 1730875094404}], "attachments": [{"name": "Test Error", "source": "dd997ae6-346c-458c-9718-4bc4f3a9d547-attachment.txt", "type": "text/plain"}, {"name": "Error Details", "source": "0ab57f11-e288-4f10-9235-2e3be51d307b-attachment.txt", "type": "text/plain"}], "start": 1730875022311, "stop": 1730875094428, "uuid": "95b35490-bdb6-4142-b427-a3ba6cb29978", "historyId": "92119e2bb8a8c6776bd585b40f9873e6", "testCaseId": "92119e2bb8a8c6776bd585b40f9873e6", "fullName": "tests.test_url_processor.TestURLProcessor#test_process_urls", "labels": [{"name": "feature", "value": "URL Validation and Screenshot Capture"}, {"name": "epic", "value": "URL Processing"}, {"name": "story", "value": "Process URLs from Excel"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_url_processor"}, {"name": "subSuite", "value": "TestURLProcessor"}, {"name": "host", "value": "DESKTOP-BL4C2NE"}, {"name": "thread", "value": "36276-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_url_processor"}]}