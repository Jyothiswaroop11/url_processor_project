self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x00000180DCE94F80>

    @allure.story("Process URLs from Excel")
    @allure.description("Test processing URLs from Excel file and capturing screenshots")
    def test_process_urls(self):
        try:
            # Initialize Configuration and backup previous reports
            config = Configuration.get_config()
            Configuration.ensure_directories()
            Configuration.backup_previous_reports()
    
            # Read Excel file
            excel_path = config["excel_path"]
            sheet_name = config["sheet_name"]
    
            print(f"\nReading Excel file: {excel_path}")
>           rows = ExcelHandler.get_row_count(excel_path, sheet_name)

test_url_processor.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\utils\excel_handler.py:29: in get_row_count
    workbook = ExcelHandler.load_workbook(file)
..\utils\excel_handler.py:10: in load_workbook
    return openpyxl.load_workbook(file_path)
..\.venv\Lib\site-packages\openpyxl\reader\excel.py:344: in load_workbook
    reader = ExcelReader(filename, read_only, keep_vba,
..\.venv\Lib\site-packages\openpyxl\reader\excel.py:123: in __init__
    self.archive = _validate_archive(fn)
..\.venv\Lib\site-packages\openpyxl\reader\excel.py:95: in _validate_archive
    archive = ZipFile(filename, 'r')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <zipfile.ZipFile [closed]>, file = './resources/links.xlsx', mode = 'r'
compression = 0, allowZip64 = True, compresslevel = None

    def __init__(self, file, mode="r", compression=ZIP_STORED, allowZip64=True,
                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):
        """Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',
        or append 'a'."""
        if mode not in ('r', 'w', 'x', 'a'):
            raise ValueError("ZipFile requires mode 'r', 'w', 'x', or 'a'")
    
        _check_compression(compression)
    
        self._allowZip64 = allowZip64
        self._didModify = False
        self.debug = 0  # Level of printing: 0 through 3
        self.NameToInfo = {}    # Find file info given name
        self.filelist = []      # List of ZipInfo instances for archive
        self.compression = compression  # Method of compression
        self.compresslevel = compresslevel
        self.mode = mode
        self.pwd = None
        self._comment = b''
        self._strict_timestamps = strict_timestamps
        self.metadata_encoding = metadata_encoding
    
        # Check that we don't try to write with nonconforming codecs
        if self.metadata_encoding and mode != 'r':
            raise ValueError(
                "metadata_encoding is only supported for reading files")
    
        # Check if we were passed a file-like object
        if isinstance(file, os.PathLike):
            file = os.fspath(file)
        if isinstance(file, str):
            # No, it's a filename
            self._filePassed = 0
            self.filename = file
            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',
                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}
            filemode = modeDict[mode]
            while True:
                try:
>                   self.fp = io.open(file, filemode)
E                   FileNotFoundError: [Errno 2] No such file or directory: './resources/links.xlsx'

..\..\..\AppData\Local\Programs\Python\Python312\Lib\zipfile\__init__.py:1331: FileNotFoundError