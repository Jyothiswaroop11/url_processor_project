self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x00000188BF9D22D0>

    @allure.story("Process URLs from Excel")
    @allure.description("Test processing URLs from Excel file and capturing screenshots")
    def test_process_urls(self):
        try:
            # Initialize Configuration and backup previous reports
            config = Configuration.get_config()
            Configuration.ensure_directories()
            Configuration.backup_previous_reports()
    
            # Read Excel file
            excel_path = config["excel_path"]
            sheet_name = config["sheet_name"]
    
            print(f"\nReading Excel file: {excel_path}")
            rows = ExcelHandler.get_row_count(excel_path, sheet_name)
    
            if rows <= 1:
                raise ValueError("No data found in Excel file")
    
            results = []
            total_urls = rows - 1  # Subtract header row
            print(f"\nTotal URLs to process: {total_urls}")
    
            # Process each URL
            for r in range(2, rows + 1):  # Start from row 2 to skip header
                url = ExcelHandler.read_data(excel_path, sheet_name, r, 1)
    
                if not url:
                    print(f"Empty URL found in row {r}, skipping...")
                    continue
    
                current_url_number = r - 1
                print(f"\nProcessing URL {current_url_number} of {total_urls}: {url}")
    
                with allure.step(f"Processing URL {current_url_number} of {total_urls}"):
                    result = WebAutomation.process_url(url, current_url_number)
                    results.append(result)
    
                # Wait between URLs
                if r < rows:
                    wait_time = config["wait_between_urls"]
                    print(f"Waiting {wait_time} seconds before next URL...")
                    time.sleep(wait_time)
    
            # Generate summary
            successful = sum(1 for r in results if r['status'] == 'Success')
            failed = len(results) - successful
    
            summary = f"""
            Processing Summary:
            Total URLs processed: {len(results)}
            Successfully loaded: {successful}
            Failed to load: {failed}
            Success rate: {(successful / len(results) * 100 if results else 0):.2f}%
            """
            print("\n" + summary)
    
            # Generate HTML report
>           report_path = ReportHandler.generate_html_report(results)

test_url_processor.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

results = [{'error': None, 'load_time': 4450.930833816528, 'screenshot': 'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_process...essor_project\\reports\\screenshots\\liquidgeneration_com_20241105_191437.png', 'start_time': 1730852068.8658762, ...}]

    @staticmethod
    def generate_html_report(results):
        """Generate HTML report with detailed test steps"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
        # Backup previous reports
        Configuration.backup_previous_reports()
    
        report_dir = Configuration.get_path("extent_report")
        if not os.path.exists(report_dir):
            os.makedirs(report_dir)
    
        report_path = os.path.join(report_dir, f"TestReport_{timestamp}.html")
    
        # Generate content for each URL
        url_details = []
        for i, result in enumerate(results):
            status_class = 'Pass' if result['status'] == 'Success' else 'Fatal'
            url_name = result['url']
    
            # Create steps table
            steps_content = f"""
                <div class="url-content" id="content-{i}" style="display: none;">
                    <div class="header-bar">
                        <h2>{url_name}</h2>
                        <div class="time-stamps">
                            <span class="timestamp start">{result['timestamp']}</span>
                            <span class="timestamp end">{datetime.now().strftime('%H:%M:%S')}</span>
                            <span class="duration">{ReportHandler.get_duration(result['start_time'])}</span>
                        </div>
                        <div class="action-icons">
                            <span class="icon info" onclick="showInfo(this)" title="Info">ⓘ</span>
                            <span class="icon success" onclick="showSuccessInfo(this)" title="Success">✓</span>
                            <span class="icon error" onclick="showErrorInfo(this)" title="Error">✕</span>
                            <span class="icon warning" onclick="showWarningInfo(this)" title="Warning">⚠</span>
                            <span class="icon sync" onclick="refreshContent()" title="Refresh">↻</span>
                            <span class="icon close" onclick="closeContent()" title="Close">×</span>
                        </div>
                    </div>
                    <table class="details-table">
                        <thead>
                            <tr>
                                <th>STATUS</th>
                                <th>TIMESTAMP</th>
                                <th>DETAILS</th>
                            </tr>
                        </thead>
                        <tbody>
            """
    
            for step in result['steps']:
                step_status_class = {
                    'FATAL': 'Fatal',
                    'PASS': 'Pass',
                    'SUCCESS': 'Pass',
                    'FAIL': 'Fail',
                    'INFO': 'Pass'
                }.get(step['status'], 'Pass')
    
                steps_content += f"""
                    <tr>
                        <td>
                            <div class="status-container">
                                <span class="info-icon" data-status="{step_status_class}" data-time="{step['timestamp']}">ⓘ</span>
                                <div class="status-tooltip">
                                    <div>Status: {step_status_class}</div>
                                    <div>Time: {step['timestamp']}</div>
                                </div>
                            </div>
                        </td>
                        <td>{step['timestamp']}</td>
                        <td>{step['message']}</td>
                    </tr>
                """
    
            if result.get('screenshot'):
                base64_image = ReportHandler.encode_image_to_base64(result['screenshot'])
                if base64_image:
                    steps_content += f"""
                        <tr>
                            <td colspan="3" class="screenshot-container">
                                <button class="screenshot-btn" onclick="toggleScreenshot('screenshot-{i}')" id="btn-screenshot-{i}">
                                    Show Screenshot
                                </button>
                                <div class="screenshot-wrapper" id="screenshot-{i}" style="display: none;">
                                    <img src="{base64_image}" class="screenshot" alt="Screenshot" loading="lazy" />
                                </div>
                            </td>
                        </tr>
                    """
    
            steps_content += """
                        </tbody>
                    </table>
                </div>
            """
    
            url_details.append({
                'index': i,
                'url': url_name,
                'status': status_class,
                'content': steps_content
            })
    
        # Create the HTML content
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Test Results</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    margin: 0;
                    padding: 0;
                    display: flex;
                    height: 100vh;
                    background-color: #f5f5f5;
                }}
    
                .left-panel {{
                    width: 300px;
                    background-color: #fff;
                    border-right: 1px solid #ddd;
                    overflow-y: auto;
                    height: 100vh;
                    display: flex;
                    flex-direction: column;
                }}
    
                .left-panel-header {{
                    padding: 20px;
                    border-bottom: 1px solid #ddd;
                    background-color: #f8f9fa;
                }}
    
                .left-panel-header h1 {{
                    margin: 0;
                    font-size: 18px;
                    color: #666;
                }}
    
                .toolbar {{
                    padding: 10px;
                    border-bottom: 1px solid #ddd;
                    display: flex;
                    gap: 5px;
                    background-color: #fff;
                }}
    
                .toolbar-icon {{
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    background-color: #e0e0e0;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    font-size: 16px;
                }}
    
                .toolbar-icon:hover {{
                    background-color: #1976D2;
                    color: white;
                }}
    
                .right-panel {{
                    flex: 1;
                    overflow-y: auto;
                    padding: 20px;
                    background-color: #fff;
                }}
    
                .url-list {{
                    list-style: none;
                    padding: 0;
                    margin: 0;
                    flex-grow: 1;
                    overflow-y: auto;
                }}
    
                .url-item {{
                    padding: 15px;
                    border-bottom: 1px solid #ddd;
                    cursor: pointer;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }}
    
                .url-item:hover {{
                    background-color: #f8f9fa;
                }}
    
                .url-item.active {{
                    background-color: #e9ecef;
                }}
    
                .status-badge {{
                    padding: 4px 8px;
                    border-radius: 4px;
                    font-size: 12px;
                    color: white;
                    font-weight: 500;
                }}
    
                .Pass {{
                    background-color: #28a745;
                }}
    
                .Fatal {{
                    background-color: #dc3545;
                }}
    
                .Fail {{
                    background-color: #dc3545;
                }}
    
                .header-bar {{
                    padding: 20px;
                    border-bottom: 1px solid #ddd;
                    background-color: #f8f9fa;
                    margin-bottom: 20px;
                    border-radius: 4px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    flex-wrap: wrap;
                    gap: 15px;
                }}
    
                .time-stamps {{
                    display: flex;
                    gap: 10px;
                    align-items: center;
                }}
    
                .timestamp {{
                    padding: 6px 12px;
                    border-radius: 4px;
                    font-size: 13px;
                    font-weight: 500;
                    color: white;
                }}
    
                .timestamp.start {{
                    background-color: #28a745;
                }}
    
                .timestamp.end {{
                    background-color: #dc3545;
                }}
    
                .duration {{
                    padding: 6px 12px;
                    border-radius: 4px;
                    font-size: 13px;
                    background-color: #6c757d;
                    color: white;
                }}
    
                .action-icons {{
                    display: flex;
                    gap: 5px;
                }}
    
                .icon {{
                    width: 30px;
                    height: 30px;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    color: white;
                }}
    
                .icon:hover {{
                    transform: scale(1.1);
                }}
    
                .icon.info {{ background-color: #17a2b8; }}
                .icon.success {{ background-color: #28a745; }}
                .icon.error {{ background-color: #dc3545; }}
                .icon.warning {{ background-color: #ffc107; color: #000; }}
                .icon.sync {{ background-color: #6c757d; }}
                .icon.close {{ background-color: #6c757d; }}
    
                .status-container {{
                    position: relative;
                    display: inline-block;
                }}
    
                .status-tooltip {{
                    display: none;
                    position: absolute;
                    background-color: #333;
                    color: white;
                    padding: 8px 12px;
                    border-radius: 4px;
                    font-size: 12px;
                    z-index: 1000;
                    white-space: nowrap;
                    left: 100%;
                    top: 50%;
                    transform: translateY(-50%);
                    margin-left: 10px;
                }}
    
                .status-container:hover .status-tooltip {{
                    display: block;
                }}
    
                .details-table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }}
    
                .details-table th {{
                    padding: 12px 15px;
                    text-align: left;
                    background-color: #f8f9fa;
                    color: #666;
                    font-weight: 600;
                    border-bottom: 2px solid #dee2e6;
                }}
    
                .details-table td {{
                    padding: 12px 15px;
                    border-bottom: 1px solid #dee2e6;
                }}
    
                .screenshot-container {{
                    text-align: center;
                    padding: 20px;
                    background-color: #f8f9fa;
                }}
    
                .screenshot-btn {{
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-weight: 500;
                    transition: all 0.3s ease;
                }}
    
                .screenshot-btn.active {{
                    background-color: #dc3545;
                }}
    
                .screenshot {{
                    max-width: 100%;
                    margin-top: 15px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                }}
    
                .screenshot-wrapper {{
                    display: none;
                    margin-top: 15px;
                }}
            </style>
        </head>
        <body>
            <div class="left-panel">
                <div class="left-panel-header">
                    <h1>TESTS</h1>
                </div>
                <div class="toolbar">
                    <div class="toolbar-icon" title="Toggle Menu">≡</div>
                    <div class="toolbar-icon" title="Refresh">↺</div>
                    <div class="toolbar-icon" title="Close Panel">×</div>
                    <div class="toolbar-icon" title="Search">🔍</div>
                </div>
                <ul class="url-list">
                    {"".join(f'''
                        <li class="url-item" onclick="showContent({detail['index']})">
                            <span>{detail['url']}</span>
                            <span class="status-badge {detail['status']}">{detail['status']}</span>
                        </li>
                    ''' for detail in url_details)}
                </ul>
            </div>
    
            <div class="right-panel">
                {"".join(detail['content'] for detail in url_details)}
            </div>
    
            <script>
                function showContent(index) {{
                    document.querySelectorAll('.url-content').forEach(content => {{
                        content.style.display = 'none';
                    }});
    
                    document.querySelectorAll('.url-item').forEach(item => {{
                        item.classList.remove('active');
                    }});
    
                    const selectedContent = document.getElementById(`content-${{index}}`);
                    const selectedItem = document.querySelectorAll('.url-item')[index];
    
                    if (selectedContent && selectedItem) {{
                        selectedContent.style.display = 'block';
                        selectedItem.classList.add('active');
                    }}
                }}
    
                function toggleScreenshot(id) {{
                    const screenshot = document.getElementById(id);
                    const button = document.getElementById(`btn-${{id}}`);
    
                    if (!screenshot || !button) return;
    
                    const isHidden = screenshot.style.display === 'none';
                    screenshot.style.display = isHidden ? 'block' : 'none';
                    button.textContent = isHidden ? 'Hide Screenshot' : 'Show Screenshot';
                    button.style.backgroundColor = isHidden ? '#dc3545' : '#2196F3';
                    button.classList.toggle('active');
                }}
    
                function showInfo(element) {{
                    const successCount = document.querySelectorAll('.status-badge.Pass').length;
                    const failCount = document.querySelectorAll('.status-badge.Fatal, .status-badge.Fail').length;
>                   alert(`Test Summary:\\nPassed: ${successCount}\\nFailed: ${failCount}\\nTotal: ${successCount + failCount}`);
                }}
    
                function showSuccessInfo(element) {{
                    const successCount = document.querySelectorAll('.status-badge.Pass').length;
                    alert(`Passed Tests: ${successCount}`);
                }}
    
                function showErrorInfo(element) {{
                    const failCount = document.querySelectorAll('.status-badge.Fatal, .status-badge.Fail').length;
                    alert(`Failed Tests: ${failCount}`);
                }}
    
                function showWarningInfo(element) {{
                    alert('No warnings at this time');
                }}
    
                function refreshContent() {{
                    location.reload();
                }}
    
                function closeContent() {{
                    const rightPanel = document.querySelector('.right-panel');
                    if (rightPanel) {{
                        rightPanel.style.display = rightPanel.style.display === 'none' ? 'block' : 'none';
                    }}
                }}
    
                function searchUrls() {{
                    const searchTerm = prompt('Enter search term:');
                    if (searchTerm !== null && searchTerm.trim() !== '') {{
                        const items = document.querySelectorAll('.url-item');
                        let found = false;
    
                        items.forEach(item => {{
                            const text = item.textContent.toLowerCase();
                            const search = searchTerm.toLowerCase().trim();
    
                            if (text.includes(search)) {{
                                item.style.display = 'flex';
                                found = true;
                            }} else {{
                                item.style.display = 'none';
                            }}
                        }});
    
                        if (!found) {{
                            alert('No matching items found');
                        }}
                    }}
                }}
    
                // Initialize all functionality
                document.addEventListener('DOMContentLoaded', function() {{
                    // Menu toggle
                    const menuToggle = document.querySelector('.toolbar-icon:nth-child(1)');
                    if (menuToggle) {{
                        menuToggle.onclick = function() {{
                            const urlList = document.querySelector('.url-list');
                            if (urlList) {{
                                urlList.style.display = urlList.style.display === 'none' ? 'block' : 'none';
                            }}
                        }};
                    }}
    
                    // Refresh button
                    const refreshButton = document.querySelector('.toolbar-icon:nth-child(2)');
                    if (refreshButton) {{
                        refreshButton.onclick = refreshContent;
                    }}
    
                    // Close panel button
                    const closeButton = document.querySelector('.toolbar-icon:nth-child(3)');
                    if (closeButton) {{
                        closeButton.onclick = closeContent;
                    }}
    
                    // Search button
                    const searchButton = document.querySelector('.toolbar-icon:nth-child(4)');
                    if (searchButton) {{
                        searchButton.onclick = searchUrls;
                    }}
    
                    // Initialize tooltips
                    document.querySelectorAll('.status-container').forEach(container => {{
                        container.addEventListener('mouseenter', function() {{
                            const tooltip = this.querySelector('.status-tooltip');
                            if (tooltip) {{
                                tooltip.style.display = 'block';
                            }}
                        }});
    
                        container.addEventListener('mouseleave', function() {{
                            const tooltip = this.querySelector('.status-tooltip');
                            if (tooltip) {{
                                tooltip.style.display = 'none';
                            }}
                        }});
                    }});
    
                    // Show first URL content by default
                    const urlItems = document.querySelectorAll('.url-item');
                    if (urlItems.length > 0) {{
                        showContent(0);
                    }}
                }});
            </script>
        </body>
        </html>
        """
E       NameError: name 'successCount' is not defined

..\utils\report_handler.py:460: NameError