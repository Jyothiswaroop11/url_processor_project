{"name": "test_process_excel_urls", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Jyothiswaroop\\\\PycharmProjects\\\\url_processor_project\\\\utils\\\\original_styles.css'", "trace": "self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x0000021BE3037350>\nexcel_urls = [('oceanofgames.com', 2), ('google.com', 3), ('http://www.liquidgeneration.com/', 4), ('https://httpstat.us/403', 5)]\n\n    @allure.story(\"Process URLs from Excel with Error Detection\")\n    def test_process_excel_urls(self, excel_urls):\n        \"\"\"Test processing URLs from Excel file with error detection\"\"\"\n        try:\n            # Initialize Configuration and backup previous reports\n            Configuration.backup_previous_reports()\n    \n            results = []\n            total_urls = len(excel_urls)\n            print(f\"\\nTotal URLs to process: {total_urls}\")\n    \n            # Process each URL\n            for url, row_number in excel_urls:\n                with allure.step(f\"Processing URL {row_number - 1} of {total_urls}: {url}\"):\n                    print(f\"\\nProcessing URL {row_number - 1} of {total_urls}: {url}\")\n    \n                    result = WebAutomation.process_url(url, row_number - 1)\n                    results.append(result)\n    \n                    # Add detailed Allure report\n                    status_color = \"green\" if result['status'] == 'Success' else \"red\"\n                    allure.attach(\n                        body=f\"\"\"\n                        URL: {url}\n                        Status: {result['status']}\n                        Error: {result['error'] if result['error'] else 'None'}\n                        Load Time: {result.get('load_time', 0):.2f}ms\n                        \"\"\",\n                        name=f\"URL Test Result {row_number - 1}\",\n                        attachment_type=allure.attachment_type.TEXT\n                    )\n    \n                    # Wait between URLs\n                    if row_number < total_urls:\n                        wait_time = Configuration.get_config()[\"wait_between_urls\"]\n                        print(f\"Waiting {wait_time} seconds before next URL...\")\n                        time.sleep(wait_time)\n    \n            # Generate summary\n            successful = sum(1 for r in results if r['status'] == 'Success')\n            failed = len(results) - successful\n    \n            summary = f\"\"\"\n            Processing Summary:\n            Total URLs processed: {len(results)}\n            Successfully loaded: {successful}\n            Failed to load: {failed}\n            Success rate: {(successful / len(results) * 100 if results else 0):.2f}%\n    \n            Failed URLs:\n            {self._format_failed_urls(results)}\n            \"\"\"\n            print(\"\\n\" + summary)\n    \n            # Update global test results for Flask server\n            global test_results\n            test_results = results\n    \n            # Generate HTML report\n>           report_path = ReportHandler.generate_html_report(results)\n\ntest_url_processor.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\report_handler.py:291: in generate_html_report\n    <style>{ReportHandler.get_styles()}</style>\n..\\utils\\report_handler.py:128: in get_styles\n    return styles + ReportHandler.get_original_styles()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @staticmethod\n    def get_original_styles():\n        return \"\"\"\n                /* Your original styles here */\n>               \"\"\" + open(os.path.join(os.path.dirname(__file__), 'original_styles.css')).read()\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Jyothiswaroop\\\\PycharmProjects\\\\url_processor_project\\\\utils\\\\original_styles.css'\n\n..\\utils\\report_handler.py:134: FileNotFoundError"}, "description": "Test processing URLs from Excel file with error detection", "steps": [{"name": "Processing URL 1 of 4: oceanofgames.com", "status": "passed", "attachments": [{"name": "Screenshot_oceanofgames_com", "source": "eefd705a-e986-44d7-b3a9-7bfb980a70c0-attachment.png", "type": "image/png"}, {"name": "URL Test Result 1", "source": "fdd25fb6-94bf-4bdf-95ca-6fd64056b2a7-attachment.txt", "type": "text/plain"}], "start": 1730948497477, "stop": 1730948511996}, {"name": "Processing URL 2 of 4: google.com", "status": "passed", "attachments": [{"name": "Screenshot_google_com", "source": "60eb4284-f1ff-4374-ac16-2b04542572e0-attachment.png", "type": "image/png"}, {"name": "URL Test Result 2", "source": "f49cbd0e-a5f9-485f-b1fc-aa88e4a4257d-attachment.txt", "type": "text/plain"}], "start": 1730948511996, "stop": 1730948525067}, {"name": "Processing URL 3 of 4: http://www.liquidgeneration.com/", "status": "passed", "attachments": [{"name": "Screenshot_liquidgeneration_com", "source": "af7ba821-6033-4fad-b374-2f0770b9930c-attachment.png", "type": "image/png"}, {"name": "URL Test Result 3", "source": "c4e999c6-e1a8-4425-81c3-b060241515ac-attachment.txt", "type": "text/plain"}], "start": 1730948525067, "stop": 1730948541543}, {"name": "Processing URL 4 of 4: https://httpstat.us/403", "status": "passed", "attachments": [{"name": "Screenshot_httpstat_us_403", "source": "e3a5a300-7f8c-44ec-a110-f0d896806da2-attachment.png", "type": "image/png"}, {"name": "URL Test Result 4", "source": "413c2a3f-0aba-484c-8440-e3ce36b3a0af-attachment.txt", "type": "text/plain"}], "start": 1730948541543, "stop": 1730948551358}], "attachments": [{"name": "Test Error", "source": "67812356-c0eb-4d21-99c6-42e4a02e1780-attachment.txt", "type": "text/plain"}, {"name": "Error Details", "source": "8e99ce68-799f-493a-ac80-ef49e6a5bb4f-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "c1436585-2b3f-4dd0-9aed-7272f640be10-attachment.txt", "type": "text/plain"}], "start": 1730948497475, "stop": 1730948551359, "uuid": "c40e95ec-09d0-4596-9e34-43594d85b71c", "historyId": "be5f01bbfe467b80211c2ce078a6b793", "testCaseId": "be5f01bbfe467b80211c2ce078a6b793", "fullName": "tests.test_url_processor.TestURLProcessor#test_process_excel_urls", "labels": [{"name": "story", "value": "Process URLs from Excel with Error Detection"}, {"name": "feature", "value": "URL Validation and Error Detection"}, {"name": "epic", "value": "URL Processing"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_url_processor"}, {"name": "subSuite", "value": "TestURLProcessor"}, {"name": "host", "value": "DESKTOP-BL4C2NE"}, {"name": "thread", "value": "35464-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_url_processor"}]}