self = <url_processor_project.tests.test_url_processor.TestURLProcessor object at 0x00000281AF682330>

    @allure.story("Process URLs from Excel")
    @allure.description("Test processing URLs from Excel file and capturing screenshots")
    def test_process_urls(self):
        try:
            # Initialize Configuration and backup previous reports
            config = Configuration.get_config()
            Configuration.ensure_directories()
            Configuration.backup_previous_reports()
    
            # Read Excel file
            excel_path = config["excel_path"]
            sheet_name = config["sheet_name"]
    
            print(f"\nReading Excel file: {excel_path}")
            rows = ExcelHandler.get_row_count(excel_path, sheet_name)
    
            if rows <= 1:
                raise ValueError("No data found in Excel file")
    
            results = []
            total_urls = rows - 1  # Subtract header row
            print(f"\nTotal URLs to process: {total_urls}")
    
            # Process each URL
            for r in range(2, rows + 1):  # Start from row 2 to skip header
                url = ExcelHandler.read_data(excel_path, sheet_name, r, 1)
    
                if not url:
                    print(f"Empty URL found in row {r}, skipping...")
                    continue
    
                current_url_number = r - 1
                print(f"\nProcessing URL {current_url_number} of {total_urls}: {url}")
    
                with allure.step(f"Processing URL {current_url_number} of {total_urls}"):
                    result = WebAutomation.process_url(url, current_url_number)
                    results.append(result)
    
                # Wait between URLs
                if r < rows:
                    wait_time = config["wait_between_urls"]
                    print(f"Waiting {wait_time} seconds before next URL...")
                    time.sleep(wait_time)
    
            # Generate summary
            successful = sum(1 for r in results if r['status'] == 'Success')
            failed = len(results) - successful
    
            summary = f"""
            Processing Summary:
            Total URLs processed: {len(results)}
            Successfully loaded: {successful}
            Failed to load: {failed}
            Success rate: {(successful / len(results) * 100 if results else 0):.2f}%
            """
            print("\n" + summary)
    
            # Generate HTML report
>           report_path = ReportHandler.generate_html_report(results)

test_url_processor.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

results = [{'error': None, 'load_time': 4544.677972793579, 'screenshot': 'C:\\Users\\Jyothiswaroop\\PycharmProjects\\url_process...cessor_project\\reports\\screenshots\\liquidgeneration_com_20241106_013807.png', 'start_time': 1730875080.977611, ...}]

    @staticmethod
    def generate_html_report(results):
        """Generate HTML report with detailed test steps"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
        # Backup previous reports
        Configuration.backup_previous_reports()
    
        report_dir = Configuration.get_path("extent_report")
        if not os.path.exists(report_dir):
            os.makedirs(report_dir)
    
        report_path = os.path.join(report_dir, f"TestReport_{timestamp}.html")
    
        # Calculate statistics
        stats = ReportHandler.calculate_stats(results)
    
        # Generate content for each URL
        url_details = []
        for i, result in enumerate(results):
            status_class = 'Pass' if result['status'] == 'Success' else 'Fatal'
            url_name = result['url']
    
            # Create steps table
            steps_content = f"""
                    <div class="url-content" id="content-{i}" style="display: none;">
                        <div class="header-bar">
                            <div class="header-main">
                                <h2>{url_name}</h2>
                                <div class="status-indicator {status_class.lower()}">{status_class}</div>
                            </div>
                            <div class="header-details">
                                <div class="time-stamps">
                                    <span class="timestamp start">{result['timestamp']}</span>
                                    <span class="timestamp end">{datetime.now().strftime('%H:%M:%S')}</span>
                                    <span class="duration">{ReportHandler.get_duration(result['start_time'])}</span>
                                </div>
                                <div class="action-buttons">
                                    <button class="btn info" onclick="showInfo('{i}')" title="Info">
                                        <span class="icon">ⓘ</span>
                                    </button>
                                    <button class="btn refresh" onclick="refreshContent()" title="Refresh">
                                        <span class="icon">↻</span>
                                    </button>
                                    <button class="btn" onclick="exportTestCase('{i}')" title="Export">
                                        <span class="icon">↓</span>
                                    </button>
                                </div>
                            </div>
                        </div>
    
                        <div class="content-tabs">
                            <button class="tab-btn active" onclick="showTab({i}, 'steps')">Steps</button>
                            <button class="tab-btn" onclick="showTab({i}, 'screenshots')">Screenshots</button>
                            <button class="tab-btn" onclick="showTab({i}, 'data')">Data</button>
                        </div>
    
                        <div class="tab-content" id="steps-{i}">
                            <table class="details-table">
                                <thead>
                                    <tr>
                                        <th width="10%">Status</th>
                                        <th width="20%">Timestamp</th>
                                        <th width="70%">Details</th>
                                    </tr>
                                </thead>
                                <tbody>
                """
    
            for step in result['steps']:
                step_status_class = {
                    'FATAL': 'Fatal',
                    'PASS': 'Pass',
                    'SUCCESS': 'Pass',
                    'FAIL': 'Fail',
                    'INFO': 'Info'
                }.get(step['status'], 'Info')
    
                steps_content += f"""
                        <tr class="step-row {step_status_class.lower()}">
                            <td>
                                <div class="status-container">
                                    <span class="step-status {step_status_class.lower()}">{step_status_class}</span>
                                </div>
                            </td>
                            <td>{step['timestamp']}</td>
                            <td>{step['message']}</td>
                        </tr>
                    """
    
            steps_content += """
                                </tbody>
                            </table>
                        </div>
                """
    
            if result.get('screenshot'):
                base64_image = ReportHandler.encode_image_to_base64(result['screenshot'])
                if base64_image:
                    steps_content += f"""
                            <div class="tab-content" id="screenshots-{i}" style="display: none;">
                                <div class="screenshot-gallery">
                                    <div class="screenshot-container">
                                        <img src="{base64_image}" class="screenshot"
                                             alt="Test Screenshot" loading="lazy"
                                             onclick="openImageModal(this.src)" />
                                        <div class="screenshot-overlay">
                                            <button class="btn" onclick="downloadScreenshot(this)">
                                                Download
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        """
    
            # Add data tab content
            steps_content += f"""
                    <div class="tab-content" id="data-{i}" style="display: none;">
                        <div class="data-container">
                            <pre><code>{json.dumps(result, indent=2)}</code></pre>
                        </div>
                    </div>
                """
    
            steps_content += "</div>"  # Close url-content div
    
            url_details.append({
                'index': i,
                'url': url_name,
                'status': status_class,
                'content': steps_content,
                'timestamp': result['timestamp'],
                'duration': result.get('load_time', 0)
            })
    
        # Generate complete HTML content
        html_content = f"""
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Test Results - {timestamp}</title>
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
                <style>
>                   {ReportHandler.get_styles()}
                </style>
            </head>
            <body>
                <div class="layout">
                    <div class="left-panel">
                        <div class="left-panel-header">
                            <h1>Test Results</h1>
                            <div class="header-actions">
                                <button class="btn" onclick="togglePanel()">≡</button>
                            </div>
                        </div>
                        {ReportHandler.generate_dashboard_html(stats)}
                        <ul class="url-list">
                            {"".join(f'''
                                <li class="url-item" onclick="showContent({detail['index']})"
                                    data-timestamp="{detail['timestamp']}"
                                    data-duration="{detail['duration']}">
                                    <div class="url-item-content">
                                        <span class="url-name">{detail['url']}</span>
                                        <span class="status-badge {detail['status'].lower()}">{detail['status']}</span>
                                    </div>
                                </li>
                            ''' for detail in url_details)}
                        </ul>
                    </div>
    
                    <div class="right-panel">
                        {"".join(detail['content'] for detail in url_details)}
                    </div>
    
                    <!-- Image Modal -->
                    <div id="imageModal" class="modal">
                        <span class="modal-close" onclick="closeImageModal()">&times;</span>
                        <img id="modalImage" class="modal-content">
                    </div>
                </div>
    
                <script>
                    {ReportHandler.get_scripts()}
                </script>
            </body>
            </html>
            """
E       AttributeError: type object 'ReportHandler' has no attribute 'get_styles'

..\utils\report_handler.py:254: AttributeError